Input: 
n = 3
arr[] = {1, 2, 1}
Output: 
1 1 2
1 2 1
2 1 1
Explanation:
These are the only possible unique permutations
for the given array.

Input: 
n = 2
arr[] = {4, 5}
Output: 
Only possible 2 unique permutations are
4 5
5 4


1st approach==========================================================================

 unordered_set<string>st;
  vector<vector<int>>result;
  int N;
  
  void solve(vector<int> &arr, vector<int> &temp, vector<bool> &used){
      if(temp.size()==N){
          string s = "";
          for(int &x : temp){
              s += to_string(x);
          }
          if(st.find(s)==st.end()){
              result.push_back(temp);
              st.insert(s);
          } return;
      }
  
  for(int i=0; i<N; i++){
      if(used[i] == false){
          temp.push_back(arr[i]);
          used[i] = true;
          
          solve(arr, temp, used);
          
          used[i] = false;
          temp.pop_back();
      }
  }
  }
  
    vector<vector<int>> uniquePerms(vector<int> &arr ,int n) {
        N=n;
        vector<bool>used(n, false);
        vector<int>temp;
        sort(begin(arr), end(arr));
        solve(arr, temp, used);
        return result;
        // code here
    }

2nd approach===================================================================


vector<vector<int>>result;
  int N;
  void solve(vector<int>& arr, vector<bool>& used, vector<int>& temp, string tempstring){
      if(temp.size()==N){
          result.push_back(temp);
          return;
      }
      
      for(int i=0; i<N; i++){
          if(used[i]==true || (i>0 && arr[i]==arr[i-1] && used[i-1]==true)){
              continue;
          }
          used[i] = true;
          temp.push_back(arr[i]);
          solve(arr, used, temp, tempstring);
          temp.pop_back();
          used[i] = false;
      }
  }
  
     vector<vector<int>> uniquePerms(vector<int> &arr ,int n) {
         sort(begin(arr), end(arr));
         vector<int>temp;
         vector<bool>used(n, false);
         N = n;
         string tempstring = "";
         solve(arr, used, temp, tempstring);
         return result;
     }

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        
        cin>>n;
        vector<int> arr(n);
        
        for(int i=0 ; i<n ; i++)
            cin>>arr[i];

        Solution ob;
        vector<vector<int>> res = ob.uniquePerms(arr,n);
        for(int i=0; i<res.size(); i++)
        {
            for(int j=0; j<n; j++)
            {
                cout<<res[i][j]<<" ";
            }
            cout<<"\

