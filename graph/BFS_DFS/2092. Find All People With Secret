Input: n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1
Output: [0,1,2,3,5]
Explanation:
At time 0, person 0 shares the secret with person 1.
At time 5, person 1 shares the secret with person 2.
At time 8, person 2 shares the secret with person 3.
At time 10, person 1 shares the secret with person 5.​​​​
Thus, people 0, 1, 2, 3, and 5 know the secret after all the meetings.

Input: n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3
Output: [0,1,3]
Explanation:
At time 0, person 0 shares the secret with person 3.
At time 2, neither person 1 nor person 2 know the secret.
At time 3, person 3 shares the secret with person 0 and person 1.
Thus, people 0, 1, and 3 know the secret after all the meetings.

Input: n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1
Output: [0,1,2,3,4]
Explanation:
At time 0, person 0 shares the secret with person 1.
At time 1, person 1 shares the secret with person 2, and person 2 shares the secret with person 3.
Note that person 2 can share the secret at the same time as receiving it.
At time 2, person 3 shares the secret with person 4.
Thus, people 0, 1, 2, 3, and 4 know the secret after all the meetings.


==============================using BFS=============================================================
typedef pair<int, int> p;
    vector<int> findAllPeople(int n, vector<vector<int>>& meetings, int firstPerson) {
  unordered_map<int, vector<p>> adj;
  for(vector<int> &meeting : meetings){
    int person1 = meeting[0];
    int person2 = meeting[1];
    int time = meeting[2];
    adj[person1].push_back({person2, time});
    adj[person2].push_back({person1, time});
  }
  queue<p>q;
  q.push({0, 0});
  q.push({firstPerson, 0});
  vector<int>earlySecretTime(n, INT_MAX);
  earlySecretTime[0] = 0;
  earlySecretTime[firstPerson] = 0;

  while(!q.empty()){
    auto[person, time] = q.front();
    q.pop();
    for(auto &ngbr : adj[person]){
        int nextPerson = ngbr.first;
        int t = ngbr.second;
        if(t>= time && earlySecretTime[nextPerson]>t){
            earlySecretTime[nextPerson] = t;
            q.push({nextPerson, t});
        }
    }
  }  vector<int>result;
  for(int i=0; i<n; i++){
    if(earlySecretTime[i] != INT_MAX){
        result.push_back(i);
    }
  } return result;
        
    }


=============================DFS==============================================================================
typedef pair<int, int> p;
void dfs(int person, int time, unordered_map<int, vector<p>> &adj, vector<int> &earlySecretTime){
    for(auto &ngbr : adj[person]){
        int nextPerson = ngbr.first;
        int t = ngbr.second;

        if(t>= time && earlySecretTime[nextPerson]  > t){
            earlySecretTime[nextPerson] = t;
            dfs(nextPerson, t, adj, earlySecretTime);
        }
    }
}

    vector<int> findAllPeople(int n, vector<vector<int>>& meetings, int firstPerson) {
                 unordered_map<int, vector<p>> adj;
                 for(vector<int> &meeting: meetings){
                    int person1 = meeting[0];
                    int person2 = meeting[1];
                    int time = meeting[2];

                    adj[person1].push_back({person2, time});
                    adj[person2].push_back({person1, time});
                 }
                 vector<int>earlySecretTime(n, INT_MAX);
                 earlySecretTime[0] = 0;
                 earlySecretTime[firstPerson] = 0;
                 dfs(0, 0, adj, earlySecretTime);
                 dfs(firstPerson, 0, adj, earlySecretTime);

                 vector<int>result;
                 for(int i =0; i<n; i++){
                    if(earlySecretTime[i] != INT_MAX){
                        result.push_back(i);
                    }
                 }
                 return result;
    }
};
