Input: n = 3, edges = [[0,1],[0,2],[1,2]]
Output: 0
Explanation: There are no pairs of nodes that are unreachable from each other. Therefore, we return 0.
Input: n = 7, edges = [[0,2],[0,5],[2,4],[1,6],[5,4]]
Output: 14
Explanation: There are 14 pairs of nodes that are unreachable from each other:
[[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]].
Therefore, we return 14.


//using dfs approach
void dfs(int u,  unordered_map<int, vector<int>>& adj, vector<bool>& visited, long long  &sizeOfComponent ){
    visited[u] = true;
    sizeOfComponent++;
    for(int &v : adj[u]){
        if(!visited[v]){
            dfs(v, adj, visited, sizeOfComponent);
        }
    }
}

    long long countPairs(int n, vector<vector<int>>& edges) {
        unordered_map<int, vector<int>>adj;
        for(auto &vec : edges){
            int u = vec[0];
            int v = vec[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        vector<bool>visited(n, false);
        long long remainingnodes = n;
        long long result = 0;
        for(int i=0; i<n; i++){
            if(!visited[i]){
                long long sizeOfComponent = 0;
                dfs(i, adj, visited, sizeOfComponent);
                result += (sizeOfComponent) * (remainingnodes - sizeOfComponent);
                remainingnodes -= sizeOfComponent;
            }
        }
        return result;
        
    }
};


void bfs(int u, unordered_map<int, vector<int>> &adj, vector<bool> &visited, long long &size){
    queue<int>q;
    q.push(u);
    visited[u] = true;
    size++;
    while(!q.empty()){
        int x = q.front();
        q.pop();
        for(int &v : adj[x]){
            if(!visited[v]){
                visited[v] = true;
                q.push(v);
                size++;
            }
        }
    }
}
    long long countPairs(int n, vector<vector<int>>& edges) {
        unordered_map<int, vector<int>>adj;
        for(auto &vec : edges){
            int u = vec[0];
            int v = vec[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        vector<bool>visited(n, false);
        long long remainingNodes = n;

        long long result = 0;
        for(int i=0; i<n; i++){
            if(!visited[i]){
                long long size = 0;
                bfs(i, adj, visited, size);
                    result += size * (remainingNodes - size);
                    remainingNodes -= size;
                }
            }
            return result;
        
        
    }


